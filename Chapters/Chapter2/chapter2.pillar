!!WfWorkflow Core Design
@Chapter2


Is it not the previous chapter????


The design of ...
takes most of information from the whitepaper.

!!!Overview

WfWorkflow package name is ===Workflow===.

+Workflow sub-packages>figures/workflow-code-packages.png|width=40|label=figcode+

It's composed of several sub-packages as shown in Figure *@figcode*.

+Workflow full package classes>figures/workflow-code-fullpackageview.png|width=40|label=figcore+

!!!!Workflow
Main package containing most of the core classes (See Figure *@figcore*).
The base class of Workflow is ==WfManagedObject==. ==WfManagedObject== inherits of ==Object==.

-==WfActivation== represents the realization of an activity. It's a central classes of the workflow engine. It has no subclass at this stage. 
--WfFrame represent the frame to be used in a running-workflow.it has got a reference to the workflow and it is based on a dictionary mapping steps to an activation. It exists several subclasses (RootFrame for the main process frame, SubFrame to embed sub-workflow).
--WfStaticElement and its subclasses allows to declare workflows. There are different kinds of WfSteps (activity, named, start, substeps that are static or dynamic). There are WfOutgoingEdge that represents transitions form a steps to another. Finally, there is WfWorkflow which represents the main workflow classes composed of other static elements (composite pattern).
--WfWorkList reprensents the worklist of a running-workflow. It has two collections, one with the running and one  with the completed activations. It is a major components of the engine. For now it has no subclasses.
--WfWorkflowHistory represents the versions of a workflow definition. He has got a name and references to all the versions of my workflows. He is able to create new versions of a workflow by copying the latest one. 
-This sub-package has two other classes (not subclass of WfManagedObject)
--WfWorkflowLibrary that is a collection of some simple workflow definitions (simpleSequence simpleSplit simpleBranch simpleJoin simpleLoop simpleBranchJoin branchAndLoop loopingJoin simpleSubflow loopingSubflow dynamicSubflow)
--WfWorkflowManager role it to manage the changes within definitions and running workflows. Right now it has no subclasses and define only the protocol (ex: noteRemovalOfEdge:fromStep:)

#Archiving
#Conditions
#Tests
#XPDL
#XPDL-Export
#XPDL-Import





+Workflow sub-package classes>figures/workflow-code-hierarchie.png|width=40|@workfloSubpackage+


%!!!!Activation extracted comment:
% for the moment let us try to avoid this way.
%[[[eval=true
%    stream
%		nextPutAll: '!!', Date today printString , ;
%		lf.
%]]]

%[[[eval=true
%    stream
%		nextPutAll: '!!!Comment of Array' ;
%        cr;
%        nextPutAll: Array comment printString;
%		lf.
%]]]



!!!Overview
!!!Introduction
A powerful and extensible workflow management engine, written in Smalltalk

Workflow was conceived 2005 and originally written in Squeak Smalltalk and was originally called "Aare", as the swiss river.

Some important points:

This orignal version accessible in the *github repository>* contains only the engine and no examples or user interfaces.
The original engine depended on the OmniBase object database.The dependency from this version.
The source has been exported with Iceberg and is compatible with Pharo.

Read the *first whitepaper>* for further information.

In the follwing is a mix between explanations in the whitepaper, discussions in the Pharo community and source code comments.

The source code will be updated accordingly to the comments presented here.
@@todo get comments automatically from the image.



1 Overview 4

1.1 Preface .............................. 4

1.2 Introduction............................ 4

1.3 WorkflowEngineFeatures.................... 5

1.3.1 SequentialRouting.................... 5

1.3.2 ConditionalRouting ................... 5

1.3.3 ParallelRouting ..................... 5

1.3.4 SynchronizingMerge................... 6

1.3.5 Loops and Multiple Instances Without Synchronization 6

1.3.6 Multiple Instances Without a Priori Runtime Knowledge 6

1.3.7 EmbeddingSub-Workflow................ 6

1.3.8 EmbeddingSub-WorkflowChoice. . . . . . . . . . . . 6

1.3.9 ImplicitTermination................... 7

1.3.10 OtherTypesofActivities ................ 7

1.4 WorkflowSystemsCompared .................. 7

2 Workflow Design 7

3 Workflow Execution 13

4 Workflow Reporting 16

4.1 Interface.............................. 17 

4.1.1 Title............................ 18 

4.1.2 Selectors.......................... 18 

4.1.3 Conditions ........................ 19 

4.1.4 Fields ........................... 19

4.2 Views ............................... 19 

4.2.1 Report........................... 20 

4.2.2 Export........................... 20 

4.2.3 PieChart ......................... 20 

4.2.4 LineChart ........................ 20


5 Document Management System 20

5.1 DocumentEditor......................... 20 

5.2 EditingDocumentTypes .................... 21 

5.3 SearchingDocuments....................... 23